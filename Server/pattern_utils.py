from __future__ import annotations

"""Utilities for building password pattern statistics from wordlists."""

import re


def word_to_pattern(word: str) -> str:
    """Return a simplified hashcat-style pattern for *word*.

    Each character is mapped to one of four symbols:
    ``$U`` for uppercase letters, ``$l`` for lowercase letters,
    ``$d`` for digits and ``$s`` for symbols/other characters.
    """
    pattern = []
    for ch in word:
        if ch.isupper():
            pattern.append("$U")
        elif ch.islower():
            pattern.append("$l")
        elif ch.isdigit():
            pattern.append("$d")
        else:
            pattern.append("$s")
    return "".join(pattern)


MASK_RE = re.compile(r"(?:\$[Ulds])+")


def is_valid_pattern(mask: str) -> bool:
    """Return ``True`` if *mask* looks like a pattern generated by
    :func:`word_to_pattern`."""
    return bool(MASK_RE.fullmatch(mask))
