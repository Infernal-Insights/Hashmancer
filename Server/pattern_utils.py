from __future__ import annotations

"""Utilities for building password pattern statistics from wordlists."""

import re

from darkling import charsets


def word_to_pattern(word: str) -> str:
    """Return a simplified hashcat-style pattern for *word*.

    Each character is mapped to one of six symbols:
    ``$U`` for uppercase letters, ``$l`` for lowercase letters,
    ``$d`` for digits, ``$c`` for common symbols,
    ``$e`` for emoji and ``$s`` for other characters.
    """
    pattern = []
    for ch in word:
        if ch.isupper():
            pattern.append("$U")
        elif ch.islower():
            pattern.append("$l")
        elif ch.isdigit():
            pattern.append("$d")
        elif ch in charsets.COMMON_SYMBOLS:
            pattern.append("$c")
        elif ch in charsets.EMOJI:
            pattern.append("$e")
        else:
            pattern.append("$s")
    return "".join(pattern)


MASK_RE = re.compile(r"(?:\$[Uldsce])+")


def is_valid_pattern(mask: str) -> bool:
    """Return ``True`` if *mask* looks like a pattern generated by
    :func:`word_to_pattern`."""
    return bool(MASK_RE.fullmatch(mask))


def is_valid_word(word: str) -> bool:
    """Return ``True`` if *word* is <= 25 chars and contains no spaces."""
    if not word:
        return False
    if len(word) > 25:
        return False
    if any(ch.isspace() for ch in word):
        return False
    return True
