# Hashmancer Worker Docker Image
# Optimized for distributed hash cracking workloads

FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    cmake \
    pkg-config \
    libffi-dev \
    libssl-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements*.txt /tmp/
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Build Darkling engine
WORKDIR /app
COPY . /app/
WORKDIR /app/darkling
RUN mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/darkling && \
    make -j$(nproc) && \
    make install

# Production stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    htop \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment and darkling from builder
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder /opt/darkling /opt/darkling
ENV PATH="/opt/venv/bin:/opt/darkling/bin:$PATH"

# Create non-root user
RUN groupadd -r worker && useradd -r -g worker -d /app -s /bin/bash worker

# Create directories
RUN mkdir -p /app/{data,logs,config,wordlists,rules} && \
    chown -R worker:worker /app

WORKDIR /app

# Copy application code
COPY --chown=worker:worker . /app/

# Switch to non-root user
USER worker

# Set Python path
ENV PYTHONPATH="/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "import sys; sys.exit(0)" || exit 1

WORKDIR /app

# Use exec form for proper signal handling
CMD ["python", "-m", "hashmancer.worker.worker_agent"]