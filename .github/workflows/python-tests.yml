name: Hashmancer Tests

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

jobs:
  tests:
    runs-on: [self-hosted, linux, gpu]
    timeout-minutes: 30
    
    env:
      PYTHONPATH: ${{ github.workspace }}
      LOG_LEVEL: DEBUG
      REDIS_HOST: localhost
      REDIS_PORT: 6379
    
    steps:
      - name: Cleanup workspace
        run: |
          # Clean up any previous runs
          docker-compose -f docker-compose.ultimate.yml down -v || true
          docker system prune -f || true
          sudo rm -rf ${{ github.workspace }}/_work || true
        
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: System Information
        run: |
          echo "üñ•Ô∏è System Information"
          echo "===================="
          uname -a
          echo ""
          echo "üêç Python Version:"
          python --version
          echo ""
          echo "üê≥ Docker Version:"
          docker --version
          echo ""
          if command -v nvidia-smi > /dev/null 2>&1; then
            echo "üéÆ GPU Information:"
            nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader
          else
            echo "üíª No GPU detected"
          fi
          echo ""
          echo "üíæ Disk Space:"
          df -h ${{ github.workspace }}
          echo ""
          echo "üß† Memory:"
          free -h
        
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r hashmancer/server/requirements.txt
          pip install -r hashmancer/worker/requirements.txt
          pip install -r hashmancer/server/requirements-dev.txt
          
      - name: Code Quality Checks
        run: |
          echo "üîç Running code quality checks..."
          
          # Flake8 linting
          echo "Running flake8..."
          flake8 --config .flake8 . || echo "‚ö†Ô∏è Flake8 found issues"
          
          # Black formatting check
          echo "Checking Black formatting..."
          black --check --diff . || echo "‚ö†Ô∏è Black formatting issues found"
          
          # isort import sorting check
          echo "Checking import sorting..."
          isort --check-only --diff . || echo "‚ö†Ô∏è Import sorting issues found"
          
      - name: Redis Health Check
        run: |
          echo "üîç Testing Redis connectivity..."
          if python redis_tool.py test; then
            echo "‚úÖ Redis is accessible"
            python redis_tool.py stats
          else
            echo "‚ö†Ô∏è Redis not accessible, will use Docker Redis for tests"
          fi
          
      - name: Docker Infrastructure Tests
        run: |
          echo "üê≥ Testing Docker infrastructure..."
          
          # Test Docker Compose configuration
          echo "Validating Docker Compose configuration..."
          docker-compose -f docker-compose.ultimate.yml config > /dev/null
          echo "‚úÖ Docker Compose configuration is valid"
          
          # Test Docker image builds
          echo "Testing Docker image builds..."
          docker-compose -f docker-compose.ultimate.yml build redis server
          echo "‚úÖ Core Docker images build successfully"
          
      - name: Deploy Test Environment
        run: |
          echo "üöÄ Deploying test environment..."
          
          # Start minimal test environment (Redis + Server)
          docker-compose -f docker-compose.ultimate.yml up -d redis
          
          # Wait for Redis to be ready
          echo "‚è≥ Waiting for Redis..."
          timeout=60
          while ! docker exec hashmancer-redis redis-cli ping > /dev/null 2>&1; do
            sleep 2
            timeout=$((timeout - 2))
            if [[ $timeout -le 0 ]]; then
              echo "‚ùå Redis failed to start"
              docker-compose -f docker-compose.ultimate.yml logs redis
              exit 1
            fi
          done
          echo "‚úÖ Redis is ready"
          
      - name: Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          
          # Set environment for tests
          export REDIS_HOST=localhost
          export REDIS_PORT=6379
          
          # Run Redis tool tests
          echo "Testing Redis tools..."
          python redis_tool.py test
          python redis_tool.py health --quick
          
          # Run pytest with coverage
          echo "Running pytest..."
          pytest -v --tb=short --disable-warnings -x
          
      - name: Integration Tests
        run: |
          echo "üîó Running integration tests..."
          
          # Test Redis integration
          echo "Testing Redis integration..."
          python redis_tool.py health
          
          # Test deployment script
          echo "Testing deployment readiness..."
          ./test-deployment.sh || echo "‚ö†Ô∏è Some deployment tests failed (expected without full deployment)"
          
      - name: GPU Tests
        if: contains(runner.labels, 'gpu')
        run: |
          echo "üéÆ Running GPU-specific tests..."
          
          # Test NVIDIA GPU access
          if command -v nvidia-smi > /dev/null 2>&1; then
            echo "Testing GPU access..."
            nvidia-smi
            
            # Test CUDA availability
            python -c "
            try:
                import torch
                print(f'PyTorch CUDA available: {torch.cuda.is_available()}')
                print(f'CUDA device count: {torch.cuda.device_count()}')
                if torch.cuda.is_available():
                    print(f'CUDA device: {torch.cuda.get_device_name()}')
            except ImportError:
                print('PyTorch not available for CUDA test')
            " || echo "‚ö†Ô∏è CUDA test failed"
            
          else
            echo "‚ÑπÔ∏è No GPU available for testing"
          fi
          
      - name: Performance Tests
        run: |
          echo "‚ö° Running performance tests..."
          
          # Test Redis performance
          echo "Testing Redis performance..."
          python redis_tool.py stats
          
          # Basic performance metrics
          echo "Collecting performance metrics..."
          time python -c "
          import time
          from hashmancer.server.unified_redis import redis_connection
          
          start_time = time.time()
          with redis_connection() as conn:
              for i in range(100):
                  conn.set(f'test_key_{i}', f'test_value_{i}')
                  conn.get(f'test_key_{i}')
              conn.delete(*[f'test_key_{i}' for i in range(100)])
          
          elapsed = time.time() - start_time
          print(f'Redis operations completed in {elapsed:.3f} seconds')
          print(f'Average operation time: {elapsed/200*1000:.2f}ms')
          "
          
      - name: Security Tests
        run: |
          echo "üîí Running security tests..."
          
          # Check for secrets in code
          echo "Scanning for potential secrets..."
          if command -v grep > /dev/null 2>&1; then
            # Basic secret scanning
            if grep -r -i "password\|secret\|key\|token" --include="*.py" . | grep -v "test" | grep -v ".git" | grep -v "requirements" | head -5; then
              echo "‚ö†Ô∏è Potential secrets found - please review"
            else
              echo "‚úÖ No obvious secrets found"
            fi
          fi
          
      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "üßπ Cleaning up test environment..."
          
          # Stop and remove test containers
          docker-compose -f docker-compose.ultimate.yml down -v || true
          
          # Clean up test data
          python redis_tool.py cleanup --dry-run || true
          
          # Docker cleanup
          docker system prune -f || true
          
          echo "‚úÖ Cleanup completed"
          
      - name: End-to-End Integration Test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (vars.ENABLE_E2E_TESTS == 'true' || contains(github.event.head_commit.message, '[e2e]'))
        env:
          HASHES_COM_API_KEY: ${{ secrets.HASHES_COM_API_KEY }}
          VAST_AI_API_KEY: ${{ secrets.VAST_AI_API_KEY }}
          VAST_MAX_COST_PER_HOUR: ${{ vars.VAST_MAX_COST_PER_HOUR || '0.50' }}
          TEST_DURATION_MINUTES: ${{ vars.E2E_TEST_DURATION_MINUTES || '10' }}
          MIN_JOB_RUNTIME_MINUTES: ${{ vars.E2E_MIN_JOB_RUNTIME_MINUTES || '5' }}
        run: |
          echo "üöÄ Running End-to-End Integration Test"
          echo "====================================="
          
          # Check if API keys are available
          if [[ -z "$HASHES_COM_API_KEY" || -z "$VAST_AI_API_KEY" ]]; then
            echo "‚ö†Ô∏è API keys not configured - skipping E2E test"
            echo "To enable E2E tests:"
            echo "1. Add HASHES_COM_API_KEY and VAST_AI_API_KEY to repository secrets"
            echo "2. Set ENABLE_E2E_TESTS repository variable to 'true'"
            echo "3. Or include '[e2e]' in commit message"
            exit 0
          fi
          
          # Run the integration test
          ./test-integration-e2e.sh
          
      - name: Test Results Summary
        if: always()
        run: |
          echo ""
          echo "üìä Test Results Summary"
          echo "======================"
          echo "‚úÖ Code quality checks completed"
          echo "‚úÖ Redis infrastructure tested" 
          echo "‚úÖ Docker infrastructure validated"
          echo "‚úÖ Unit tests completed"
          echo "‚úÖ Integration tests completed"
          if [[ "${{ contains(runner.labels, 'gpu') }}" == "true" ]]; then
            echo "‚úÖ GPU tests completed"
          fi
          echo "‚úÖ Performance tests completed"
          echo "‚úÖ Security scans completed"
          if [[ "${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && (vars.ENABLE_E2E_TESTS == 'true' || contains(github.event.head_commit.message, '[e2e]')) }}" == "true" ]]; then
            echo "‚úÖ End-to-end integration tests completed"
          fi
          echo ""
          echo "üéâ All tests completed on self-hosted runner!"
          echo "Runner labels: ${{ join(runner.labels, ', ') }}"

  publish:
    if: github.event_name == 'release'
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install build tool
        run: pip install build
      - name: Build wheel
        run: python -m build
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
